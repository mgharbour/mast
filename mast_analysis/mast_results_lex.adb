-----------------------------------------------------------------------
--                              Mast                                 --
--     Modelling and Analysis Suite for Real-Time Applications       --
--                                                                   --
--                       Copyright (C) 2001-2024                     --
--                 Universidad de Cantabria, SPAIN                   --
--                                                                   --
-- Authors: Michael Gonzalez       mgh@unican.es                     --
--          Jose Javier Gutierrez  gutierjj@unican.es                --
--          Jose Carlos Palencia   palencij@unican.es                --
--          Jose Maria Drake       drakej@unican.es                  --
--          Julio Luis Medina      medinajl@unican.es                --
--                                                                   --
-- This program is free software; you can redistribute it and/or     --
-- modify it under the terms of the GNU General Public               --
-- License as published by the Free Software Foundation; either      --
-- version 2 of the License, or (at your option) any later version.  --
--                                                                   --
-- This program is distributed in the hope that it will be useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of    --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU --
-- General Public License for more details.                          --
--                                                                   --
-- You should have received a copy of the GNU General Public         --
-- License along with this program; if not, write to the             --
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,      --
-- Boston, MA 02111-1307, USA.                                       --
--                                                                   --
-----------------------------------------------------------------------
with Ada.Text_IO; use Ada.Text_IO;
with mast_results_lex_dfa; use mast_results_lex_dfa; 
with mast_results_lex_io; use mast_results_lex_io; 
with Var_Strings; use Var_Strings;
with Symbol_Table; -- use Symbol_Table;

package body MAST_Results_Lex is

function YYlex return Token is
subtype short is integer range -32768..32767;
      yy_act : integer;
      yy_c : short;

-- returned upon end-of-file
-- YY_END_TOK : constant integer := 0;
YY_END_OF_BUFFER : constant := 101;
subtype yy_state_type is integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
yy_accept : constant array(0..1055) of short :=
    (   0,
        0,    0,  101,   99,   96,   98,   99,    1,    2,   99,
        4,   99,   95,   90,   90,    5,   99,   99,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,    0,   94,    0,   90,   97,   95,   92,    0,    0,
       90,    3,    0,   87,    0,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,    7,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   89,    0,   97,   91,   90,   90,    0,
        0,   95,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,    6,    0,   90,
       93,    0,    0,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   23,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   17,   87,
       87,   87,    0,   91,    0,    0,    0,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   65,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   45,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   18,   87,   87,   87,   87,   87,   87,
       52,   87,   49,   20,   87,   87,   19,   87,    0,    0,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   53,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,    0,    0,    0,   87,
       87,   87,   87,   87,   87,   87,   64,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   32,   87,   55,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       16,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,    0,   87,   87,
       87,   87,   87,   87,   87,   87,   44,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   21,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,    0,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       56,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   88,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   84,   25,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   10,    9,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   66,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   43,   87,   87,   87,   87,   87,   87,    0,
       50,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   46,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   83,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   22,   67,   87,   87,
       87,    0,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   71,   87,   87,   87,
       87,    0,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   24,   87,   87,   87,
        0,   87,   87,   87,   87,   87,   87,   51,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   73,   72,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   85,   87,   87,   87,   87,   87,    0,   87,
       87,   87,   87,   87,   87,   87,   87,   15,   87,   13,

       87,   87,   87,   87,   87,   87,   87,   78,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   62,   87,   87,   37,   87,   87,
       87,   87,   88,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   80,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   86,   63,   87,   54,   87,   42,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,    0,   35,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   40,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   57,   87,   87,   87,

       87,   87,   87,   87,   87,    0,   87,   87,   87,   87,
       87,   87,   87,   14,   41,   87,   87,   87,   87,   87,
       29,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   88,   87,   87,   79,
       87,   87,   87,   87,   70,   87,   36,   87,   87,   87,
       87,   87,   47,    8,   87,   87,   87,   87,   87,   87,
       87,   28,   87,   87,   87,   87,   87,   87,   48,   87,
       87,   87,   87,   76,   87,   87,   81,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   68,
       87,   87,   87,   75,   87,   58,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       74,   87,   87,   87,   77,   87,   87,   87,   87,   34,
       87,   87,   87,   87,   87,   59,   61,   87,   87,   87,
       87,   87,   87,   27,   87,   87,   87,   33,   87,   87,
       87,   39,   87,   87,   69,   38,   87,   87,   26,   31,
       82,   60,   87,   30,    0
    ) ;

yy_ec : constant array(Character) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    5,    7,    5,    1,    8,
        9,    5,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   19,   20,   20,   20,   20,   21,   22,    1,
       23,   24,    5,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
        1,   14,    1,    1,   25,    1,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,    1,    1,    1,   52,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    ) ;

yy_meta : constant array(0..52) of short :=
    (   0,
        1,    1,    2,    3,    3,    3,    4,    3,    3,    5,
        3,    5,    6,    7,    8,    8,    8,    8,    8,    8,
        9,    3,    3,    1,   10,   10,   10,   10,   10,   11,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,    7
    ) ;

yy_base : constant array(0..1069) of short :=
    (   0,
        0,    0, 2314, 2315, 2315, 2315,   49, 2315, 2315,   87,
     2315,   96,    0,  110,  111, 2315, 2289, 2289,   88,  101,
       98,  100,  104,  111,  116, 2290,  113,  115,  118,  121,
      133,  123,  141,  129,  139,  164,  153,  135,  142,  136,
      161, 2304, 2315,  211, 2294,    0,    0, 2315,  211,  220,
      159, 2315,  178, 2287, 2293,  183,  174,  149,  220,  178,
      221,  157,  179,   89,  222,  223,  226,  227,  224,  225,
      228,  229,  230,  232,  233,  235,  238,  240,  250,  245,
      247,  253,  261,  264,  271,  265,  267,  268,  275,  274,
      278,  280,  282,  283,  284,  285,  286,  290,  287,  296,

      298,  299,  303, 2315,  344,    0,  327,  353,  331,  359,
      332,    0,  304,  308,  359,  319,  306,  338,  360,  311,
      361,  363,  364,  369,  370,  365,  342,  372,  373,  376,
      383,  380,  377,  386,  389,  390,  391,  392,  393,  399,
      401,  404,  402,  403,  405,  406,  412,  407,  418,  414,
      422,  423,  424,  425,  426,  429,  432,  427,  435,  437,
      443,  440,  448,  444,  438,  457,  458, 2285,  199,  468,
     2315,  473,  479,  479,  480,  483,  460,  484,  489,  485,
      487,  490,  488,  493,  495,  502,  504,  505,  506,  507,
      510,  511,  512,  461,  513, 2284,  514,  515,  519,  531,

      521,  522,  523,  525,  533,  540,  541,  537,  543,  544,
      545,  551,  547,  553,  557,  559,  554,  558,  564,  562,
      565,  571,  575,  576,  578,  577,  579,  581, 2283,  584,
      585,  586,  617,  623,  595,  614,  638,  592,  587,  591,
      606,  605,  628,  608,  601,  630,  631,  638,  640,  641,
      642,  648,  649,  650,  651,  652, 2282,  654,  656,  657,
      661,  663,  662,  664,  315,  668,  670,  669,  671,  676,
      672,  677,  678, 2281,  686,  688,  689,  691,  693,  695,
      697,  699,  701, 2280,  702,  703,  704,  705,  711,  713,
     2279,  714, 2278, 2277,  716,  715, 2276,  724,  752,  740,

      718,  734,  735,  730,  736,  726,  738,  732,  740,  741,
      752, 2275,  744,  756,  758,  762,  763,  765,  766,  769,
      768,  770,  771,  773,  772,  775,  779,  776,  790,  784,
      795,  796,  798,  799,  800,  802,  803,  801,  804,  809,
      805,  806,  814,  815,  816,  808,  821,  813,  810,  828,
      831,  836,  838,  839,  840,  837, 2283,  860,  866,  849,
      867,  866,  870,  851,  850,  871, 2273,  877,  879,  882,
      880,  884,  883,  885,  886,  887,  892, 2272,  894, 2271,
      896,  897,  895,  908,  909,  901,  900,  902,  899,  915,
      917,  911,  916,  926,  927,  928,  931,  930,  932,  934,

     2270,  933,  935,  937,  936,  938,  943,  950,  942,  951,
      952,  944,  953,  954,  964,  965,  967,  977,  962,  961,
      979,  969,  982,  983,  987,  988, 2269,  990,  991,  993,
      995,  996,  999,  997, 1001, 1003, 1005, 1002, 1007, 1006,
     1014, 1016, 1013, 1009, 1017, 1021, 2268, 1023, 1022, 1027,
     1032, 1037, 1024, 1038, 1044, 1048, 1049, 1041, 1045, 1051,
     1056, 1058, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071,
     1070, 1072, 1079, 1099, 1081, 1090, 1085, 1102, 1099, 1104,
     1105, 1087, 1108, 1110, 1111, 1112, 1116, 1113, 1117, 1115,
     1118, 1124, 1123, 1125, 1126, 1128, 1127, 1132, 1129, 1130,

     2267, 1140, 1146, 1148, 1149, 1150, 1151, 1154, 1152, 1156,
     1158, 1160, 1162, 1171, 1173, 1174, 1172, 1175, 1176, 1177,
     1178, 1179, 1180, 1182, 1192, 1181, 1189, 1193, 1196, 1185,
     1202, 2242, 1199, 1205, 1209, 1206, 1211, 1214, 1216, 1218,
     1219, 2265, 2264, 1222, 1221, 1224, 1226, 1227, 1229, 1234,
     1232, 1235, 2263, 2262, 1236, 1238, 1239, 1241, 1240, 1242,
     1248, 1250, 1249, 1254, 1255, 1263, 1269, 2261, 1267, 1252,
     1274, 1268, 1279, 1280, 1281, 1282, 1286, 1284, 1285, 1287,
     1292, 1294, 2259, 1295, 1296, 1298, 1300, 1299, 1303, 1311,
     2258, 1302, 1308, 1312, 1311, 1322, 1310, 1317, 1323, 1324,

     1325, 1334, 1335, 1327, 1328, 1339, 1329, 2255, 1344, 1346,
     1351, 1352, 1354, 1348, 1353, 1356, 1355, 2254, 1359, 1363,
     1362, 1367, 1364, 1365, 1370, 1373, 1379, 1380, 1381, 1383,
     1382, 1385, 1386, 1389, 1390, 1395, 2252, 2251, 1399, 1398,
     1397, 1426, 1405, 1391, 1403, 1408, 1415, 1418, 1428, 1416,
     1417, 1429, 1431, 1433, 1436, 1438, 1439, 1442, 1440, 1444,
     1448, 1446, 1449, 1450, 1451, 1456, 1455, 1464, 1461, 1466,
     1465, 1467, 1469, 1472, 1473, 1477, 1478, 1479, 1480, 1482,
     1487, 1489, 1490, 1491, 1493, 1494, 2250, 1495, 1497, 1500,
     1498, 2247, 1503, 1505, 1510, 1508, 1514, 1511, 1512, 1518,

     1517, 1525, 1522, 1526, 1532, 1529, 1533, 1535, 1538, 1536,
     1539, 1540, 1544, 1543, 1550, 1551, 1552, 1556, 1557, 1558,
     1562, 1563, 1565, 1567, 1568, 1569, 1571, 1572, 1579, 1580,
     1574, 1587, 1582, 1583, 1588, 1589, 2246, 1590, 1595, 1598,
     1615, 1602, 1596, 1603, 1614, 1597, 1618, 2243, 1619, 1621,
     1623, 1624, 1626, 1627, 1628, 1629, 1630, 1635, 1636, 1637,
     1631, 1639, 1641, 1647, 1645, 2242, 2240, 1650, 1653, 1657,
     1658, 1659, 1661, 1663, 1664, 1665, 1667, 1668, 1674, 1676,
     1678, 1672, 2238, 1683, 1680, 1682, 1687, 1688, 1705, 1690,
     1695, 1697, 1705, 1706, 1709, 1708, 1710, 2235, 1712, 2234,

     1716, 1717, 1718, 1719, 1720, 1721, 1731, 2232, 1732, 1722,
     1733, 1740, 1724, 1737, 1743, 1723, 1742, 1744, 1747, 1752,
     1756, 1757, 1758, 1759, 2230, 1760, 1763, 2227, 1765, 1762,
     1764, 1770, 2226, 1774, 1775, 1772, 1776, 1777, 1779, 1782,
     1784, 1785, 1788, 2224, 1791, 1792, 1799, 1798, 1800, 1794,
     1802, 1805, 1809, 1812, 2223, 2222, 1813, 2219, 1814, 2218,
     1816, 1819, 1822, 1824, 1825, 1823, 1826, 1832, 1836, 1833,
     1837, 1845, 2215, 1845, 1848, 1847, 1851, 1850, 1854, 1858,
     1855, 1859, 1863, 2214, 1860, 1862, 1861, 1872, 1865, 1866,
     1877, 1876, 1880, 1883, 1884, 1886, 2212, 1890, 1891, 1892,

     1893, 1894, 1900, 1895, 1901, 1926, 1904, 1905, 1903, 1906,
     1918, 1911, 1915, 2210, 2199, 1916, 1926, 1931, 1933, 1934,
     2175, 1936, 1935, 1938, 1942, 1943, 1946, 1947, 1948, 1949,
     1952, 1953, 1954, 1955, 1959, 1962, 2315, 1963, 1966, 2172,
     1970, 1968, 1971, 1973, 2171, 1975, 2169, 1981, 1978, 1984,
     1982, 1986, 2167, 2163, 1988, 1991, 1993, 1994, 1997, 1999,
     2000, 2156, 2002, 2007, 2003, 2008, 2010, 2004, 2154, 2009,
     2011, 2015, 2019, 2152, 2022, 2024, 2149, 2026, 2031, 2032,
     2033, 2035, 2020, 2036, 2044, 2039, 2046, 2047, 2051, 2148,
     2050, 2053, 2055, 2144, 2054, 2143, 2057, 2058, 2059, 2060,

     2061, 2072, 2066, 2065, 2074, 2073, 2075, 2078, 2081, 2077,
     2142, 2085, 2088, 2091, 2139, 2093, 2095, 2097, 2100, 2138,
     2098, 2103, 2102, 2099, 2104, 1402, 1253, 2101, 2105, 2113,
     2116, 2118, 2121, 1076, 2123, 2124, 2127, 1073, 2129, 2128,
     2131,  868, 2132, 2134,  602,  552, 2135, 2137,  463,  234,
      187,  150, 2136,   52, 2315, 2175, 2183, 2189, 2198, 2207,
     2218, 2226, 2233, 2238, 2246, 2254, 2261, 2266, 2273
    ) ;

yy_def : constant array(0..1069) of short :=
    (   0,
     1055,    1, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1056, 1057, 1057, 1055, 1055, 1055, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1059, 1055, 1060,   15, 1061, 1056, 1055, 1055, 1055,
     1062, 1055, 1063, 1058, 1055, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1055, 1060, 1061, 1064, 1055, 1065, 1055,
     1066, 1056, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1067,   15,
     1055, 1055, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1055, 1055, 1055, 1068, 1055, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1055, 1069,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1055, 1055, 1055, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1055, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1055,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1055, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1055, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1055, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1055, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058,    0, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055
    ) ;

yy_nxt : constant array(0..2367) of short :=
    (   0,
        4,    5,    6,    5,    4,    7,    4,    8,    9,   10,
       11,   12,    4,   13,   14,   14,   15,   14,   14,   14,
        4,   16,   17,   18,    4,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   26,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   26,   41,
       26,    4,   42,   42,   43,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42, 1055,   42,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       42,   45,   45,   45,   45,   45,   45,   46,   55, 1055,
       45,   45,   45,   45,   45,   45,   48,   48,   55,  122,
       55,   55,   49,   49,   55,   51,   58,   60,   56,   62,
       59,   55,   64,   55,   57,   55,   55,   61,   55,   50,
       50,   55,   63,   55,   66,   67,   73,   71,   70,   55,
       65,   69,   68,   55,   74,   55,   55,   72,   76,   55,
       75,   55,   55,   79,   84,   48,   80,  101,   85, 1055,
     1055,   49,   77,   55,   83,  102,  115, 1055,   78,  100,
       81,   55,  119,   82,   55,   95,   96,  110,   50,  110,
      103,   86,   97,   87, 1055,   98,   88,   89, 1055, 1055,

       90,  120,   99, 1055,   91,  114,   92, 1055,  233,   93,
      233,  117,  121,   94,   42,   42,  104,   42,   42,   42,
       42,   42,   42,  113,   42,  107,  107,  107,  107,  107,
      107,   42,   42,   42,  108,  108,  108,  108,  108,  108,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055,  123, 1055, 1055, 1055, 1055,  131,  127, 1055,  118,
     1055,  134,   42,  116,  125, 1055,  126, 1055,  128,  129,
     1055,  124,  135, 1055,  130,  133,  136,  138,  132,  139,
      137, 1055,  142,  141, 1055, 1055,  143, 1055, 1055,  140,
      145, 1055,  144,  153, 1055, 1055,  147,  151, 1055,  155,

     1055,  148, 1055, 1055, 1055, 1055, 1055, 1055,  146,  152,
     1055,  149,  154,  160,  150,  163, 1055,  156, 1055, 1055,
      157,  159,  161, 1055, 1055,  158, 1055,  164, 1055,  165,
      162, 1055,  175,   48,  166, 1055,  181,   48,  171, 1055,
      174,  167,  178,   49,  172,  329,  168,   42,   42,  104,
       42,   42,   42,   42,   42,   42,  169,   42, 1055,   48,
       50,  173, 1055,  177,   42,   42,   42,  108,  108,  108,
      108,  108,  108,  111,  111,  111,  111,  111,  111, 1055,
     1055, 1055,  179, 1055, 1055, 1055,  188,  183,  180, 1055,
     1055,  187, 1055, 1055,  176,   42, 1055, 1055,  185,  186,

     1055,  189,  184, 1055,  193,  191, 1055,  182,  192, 1055,
     1055, 1055, 1055, 1055,  197,  195,  199,  190,  196, 1055,
      194, 1055, 1055, 1055, 1055, 1055, 1055, 1055,  198,  203,
      206,  201, 1055,  204, 1055,  200,  211,  202, 1055,  208,
      209,  205, 1055, 1055, 1055, 1055, 1055, 1055,  210, 1055,
      207,  214, 1055,  218,  212, 1055,  220, 1055, 1055,  213,
     1055,  223,  222, 1055, 1055,  226,  216,  221, 1055,  215,
      217,  219,  224,  229,  230,  227,  225, 1055, 1055,  235,
     1055, 1055,   45, 1055,  243,  261,  228,  236,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  237,  237, 1055,

     1055,  232,  231, 1055, 1055, 1055,  239, 1055, 1055, 1055,
     1055,  240,  238, 1055,  242, 1055,  241,  244,  245,  248,
      247,  246, 1055,  251, 1055, 1055, 1055, 1055,  249,  253,
     1055, 1055, 1055, 1055, 1055, 1055,  256,  250,  254, 1055,
      264, 1055, 1055, 1055,  252, 1055,  257,  258,  255,  262,
      259, 1055,  260, 1055,  263,  268,  266, 1055,  265,  267,
     1055, 1055,  270, 1055, 1055, 1055,  269, 1055,  276,  272,
      273, 1055, 1055, 1055, 1055,  271,  274, 1055, 1055, 1055,
      278,  280, 1055,  279, 1055, 1055,  281,  277,  282,  285,
      283, 1055,  275,  284,  287, 1055, 1055, 1055, 1055, 1055,

      290, 1055,  286,  288, 1055, 1055, 1055, 1055,  294,  299,
      299, 1055, 1055,  293,  297,  289,  292,  296,  291,  301,
      171, 1055, 1055,  302,  295, 1055, 1055,  303, 1055,   48,
      298,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  300,  171,  304,  308,  305, 1055,  309,
     1055, 1055,  237,  237,  237,  237,  237,  237, 1055,  306,
     1055, 1055, 1055,  310,  307,  314,  315,  311, 1055, 1055,
     1055, 1055, 1055,  316, 1055,  318, 1055, 1055,  321,  313,
      312, 1055, 1055, 1055, 1055,  317,  323,  326, 1055, 1055,
     1055, 1055, 1055,  319,  320,  331, 1055, 1055, 1055,  324,

      328,  322,  337,  325,  327,  335, 1055,  332, 1055, 1055,
      338, 1055,  330, 1055,  333, 1055,  334, 1055,  340, 1055,
      336, 1055, 1055, 1055, 1055, 1055,  346,  345,  348,  341,
      347, 1055,  339, 1055, 1055, 1055, 1055,  342, 1055,  344,
      343,  354,  349,  360, 1055,  353, 1055,  350,  356,  358,
     1055,  358, 1055,  351, 1055, 1055, 1055,  363, 1055,  352,
     1055, 1055,  365,  367, 1055,  355,  357,  357,  357,  357,
      357,  357, 1055,  361,  362,  364, 1055,  366, 1055,  369,
      371,  370, 1055, 1055,  368, 1055, 1055,  375, 1055, 1055,
     1055, 1055, 1055, 1055,  372, 1055, 1055,  383,  373, 1055,

      387,  376,  382,  384, 1055,  379,  374,  380,  386,  381,
     1055,  377,  378,  385,  388, 1055, 1055,  389, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055,  391, 1055, 1055,
     1055,  392,  390, 1055, 1055, 1055, 1055,  398,  400,  403,
      404, 1055,  397,  393,  394,  395,  396,  399, 1055,  401,
      402, 1055,  405,  408,  406,  407, 1055, 1055, 1055, 1055,
     1055,  411,  412,  415,  410,  414,  413,  409,  416, 1055,
     1055, 1055,  171,  417,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359, 1055, 1055, 1055,  424,
     1055, 1055,  421,  419,  420,  422,  423, 1055,  425, 1055,

     1055,  426, 1055, 1055, 1055, 1055, 1055, 1055,  427,  430,
      428,  434, 1055,  429, 1055, 1055, 1055, 1055,  432, 1055,
     1055, 1055, 1055,  433,  437,  431,  438,  436, 1055, 1055,
      442, 1055,  435,  440,  441, 1055, 1055, 1055,  446,  439,
      443,  448,  449,  444,  447,  445, 1055, 1055, 1055,  450,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,  456,
      452,  453, 1055, 1055, 1055,  462,  458,  455,  463,  461,
     1055, 1055, 1055, 1055, 1055,  451,  454,  457,  459,  460,
      465, 1055, 1055,  464, 1055, 1055,  468, 1055,  467, 1055,
      466,  474,  474,  474,  474,  475,  476,  469,  470, 1055,

      471,  472, 1055, 1055,  477,  478,  473, 1055, 1055,  480,
     1055, 1055,  481, 1055,  483, 1055, 1055, 1055,  484, 1055,
      479, 1055, 1055, 1055,  489, 1055, 1055, 1055,  486, 1055,
      485,  482,  488, 1055, 1055,  487, 1055, 1055,  492,  493,
      494, 1055, 1055, 1055, 1055,  490,  491, 1055,  502,  503,
      495,  496, 1055,  497,  499,  498,  508, 1055, 1055,  501,
      506, 1055,  500,  504, 1055, 1055,  507,  511, 1055, 1055,
      505, 1055,  516,  512,  510,  509, 1055,  513, 1055,  515,
      518,  514,  520, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055,  517,  519, 1055,  526,  523, 1055,

      521, 1055,  527,  522,  528, 1055,  531, 1055,  524,  529,
     1055,  530,  525,  532,  532,  532,  532,  532,  532, 1055,
      533,  535, 1055,  534, 1055, 1055,  536,  537, 1055,  538,
     1055, 1055, 1055, 1055,  540, 1055, 1055, 1055, 1055,  548,
      543,  539,  547, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055,  544, 1055,  541,  545,  553,  546,  554,  557,  542,
     1055,  549,  550,  551,  552,  556, 1055,  555, 1055, 1055,
     1055, 1055, 1055,  558, 1055,  560, 1055,  561, 1055,  564,
     1055,  566, 1055,  567,  570,  568,  559,  562,  563,  565,
      571, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,

     1055, 1055, 1055,  569,  573, 1055,  574,  579,  572, 1055,
      575,  588, 1055, 1055,  577,  582, 1055,  580,  576, 1055,
      578,  583, 1055,  587,  584, 1055, 1055,  589,  585, 1055,
      581, 1055,  586,  593, 1055,  595, 1055,  591, 1055, 1055,
      597, 1055, 1055,  592, 1055,  601, 1055, 1055,  594, 1055,
      596,  598, 1055,  605, 1055, 1055, 1055,  604, 1055, 1055,
     1055, 1055, 1055,  599,  600,  606,  603,  602, 1055, 1055,
     1055,  613, 1055, 1055, 1055, 1055,  607,  610,  608,  619,
      609,  612,  618, 1055,  611,  614,  616, 1055, 1055, 1055,
      615,  617,  620,  621, 1055,  623,  622,  625,  624, 1055,

     1055, 1055, 1055,  626, 1055, 1055, 1055, 1055,  628,  627,
      630,  633, 1055,  631, 1055, 1055, 1055,  634, 1055, 1055,
     1055,  629, 1055, 1055,  640,  642,  642,  642, 1055,  632,
     1055, 1055, 1055,  643,  637,  639,  638, 1055,  635,  641,
      636,  645, 1055, 1055, 1055, 1055,  647, 1055, 1055, 1055,
      644,  646,  648,  652, 1055, 1055,  650,  651,  655, 1055,
      656,  649,  660,  659, 1055,  653, 1055,  657, 1055,  654,
      658, 1055, 1055, 1055, 1055, 1055, 1055,  661,  665, 1055,
      663,  664, 1055, 1055, 1055, 1055,  667, 1055,  662,  668,
     1055,  673,  666, 1055,  675,  670,  671,  674,  669, 1055,

     1055, 1055, 1055, 1055,  672, 1055, 1055,  679,  676, 1055,
     1055, 1055,  680,  677,  684, 1055,  678, 1055, 1055, 1055,
      694,  691, 1055, 1055,  683, 1055,  681,  682, 1055,  693,
      685,  688,  689,  686,  690, 1055, 1055, 1055, 1055,  687,
      692,  692,  692,  692,  692,  692,  695,  698, 1055, 1055,
      696, 1055,  700, 1055,  702,  699, 1055,  697, 1055, 1055,
     1055,  701, 1055,  707, 1055,  706, 1055,  708, 1055, 1055,
     1055, 1055,  704,  703,  711, 1055, 1055,  713,  705,  712,
      716, 1055,  709,  710, 1055, 1055, 1055, 1055,  714, 1055,
      715,  718, 1055, 1055,  717,  720,  722, 1055, 1055, 1055,

     1055,  721, 1055,  727,  729,  719,  730, 1055,  728, 1055,
     1055, 1055,  723, 1055, 1055, 1055,  724, 1055, 1055,  725,
     1055,  726,  732, 1055,  739, 1055,  735,  736, 1055,  731,
     1055, 1055, 1055,  734, 1055,  738,  733, 1055, 1055,  737,
      740,  745, 1055,  746,  748, 1055, 1055,  742,  743, 1055,
      744,  749, 1055, 1055,  747, 1055, 1055,  754, 1055, 1055,
     1055,  752,  755, 1055, 1055,  753,  750,  758,  762,  751,
     1055, 1055, 1055,  756,  759,  760, 1055, 1055, 1055,  757,
      766,  768, 1055, 1055,  761, 1055,  763, 1055, 1055, 1055,
      765, 1055, 1055,  775, 1055,  770,  764,  774,  772, 1055,

     1055,  780, 1055, 1055,  769,  767,  771, 1055, 1055, 1055,
     1055,  782,  773,  776,  777, 1055, 1055, 1055, 1055,  778,
      779,  786, 1055, 1055,  781,  784,  783,  788,  785,  789,
      789,  789,  789,  789, 1055,  790,  791,  787, 1055, 1055,
      794, 1055,  792, 1055, 1055,  797, 1055, 1055, 1055, 1055,
     1055, 1055,  798,  793,  799, 1055, 1055, 1055,  795, 1055,
      806, 1055,  800,  804,  809, 1055,  807, 1055,  803,  796,
     1055,  801,  802, 1055,  810,  805,  811, 1055, 1055, 1055,
      808, 1055,  814, 1055, 1055, 1055,  818, 1055, 1055,  813,
      821,  812, 1055,  823, 1055,  815, 1055,  816, 1055,  824,

     1055,  819, 1055, 1055,  820,  825,  830, 1055, 1055,  817,
     1055,  826,  828,  822,  827, 1055,  831, 1055,  829,  833,
      833,  833,  833,  833,  833, 1055, 1055,  834, 1055, 1055,
     1055,  832, 1055,  840,  835,  836, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055,  842,  838,  837,  839,  843,
      841, 1055, 1055, 1055,  845,  849,  847, 1055,  846,  850,
     1055,  851, 1055, 1055, 1055,  848,  844, 1055,  857,  853,
      854,  858, 1055,  855,  856,  852, 1055, 1055, 1055, 1055,
     1055,  861, 1055, 1055, 1055, 1055,  863,  867,  859,  868,
     1055,  860, 1055,  862, 1055, 1055, 1055, 1055,  866, 1055,

      864,  865, 1055,  873, 1055, 1055,  869,  870, 1055,  876,
      871, 1055, 1055,  874, 1055,  875,  877,  878, 1055, 1055,
     1055,  881, 1055,  880,  883, 1055,  879,  882,  885, 1055,
      887,  886, 1055, 1055, 1055,  884, 1055,  890,  888, 1055,
      889,  892, 1055, 1055, 1055, 1055, 1055,  894,  896,  898,
      899,  891, 1055, 1055,  900,  893, 1055, 1055,  895,  906,
      906,  906,  906,  906,  897, 1055,  901, 1055, 1055,  903,
     1055, 1055,  902,  904, 1055, 1055,  905,  908, 1055, 1055,
     1055, 1055, 1055, 1055,  914, 1055, 1055,  912,  907,  910,
      916,  909, 1055,  911,  913,  922, 1055, 1055,  917,  918,

     1055,  919,  915, 1055, 1055,  920, 1055,  925,  921,  923,
     1055, 1055, 1055, 1055, 1055, 1055,  931,  927,  924,  933,
     1055, 1055,  926, 1055, 1055, 1055, 1055,  929,  930,  939,
      928, 1055,  932,  938,  935, 1055, 1055,  934, 1055,  936,
      937,  937,  937,  937,  937,  937, 1055,  942,  944,  941,
      943, 1055,  940, 1055, 1055, 1055, 1055,  948, 1055,  946,
      947,  950, 1055, 1055,  951,  945, 1055, 1055, 1055, 1055,
      952,  953, 1055, 1055, 1055, 1055,  956,  957,  958, 1055,
      949,  954, 1055, 1055,  962,  955, 1055,  965, 1055,  960,
     1055, 1055,  968, 1055,  959, 1055,  961,  963, 1055,  967,

      970, 1055, 1055,  973, 1055,  964, 1055,  975, 1055,  969,
      966, 1055,  974, 1055, 1055,  976,  977, 1055,  971, 1055,
     1055,  972, 1055, 1055, 1055,  983,  981, 1055, 1055, 1055,
     1055, 1055,  982,  978,  988, 1055,  985,  979,  980, 1055,
     1055,  987, 1055,  991, 1055,  984, 1055,  986,  989,  995,
      994, 1055, 1055, 1055,  992, 1055, 1055, 1001,  990, 1055,
      997,  998, 1000,  993, 1055, 1002, 1055, 1055, 1003,  996,
     1055, 1055, 1004, 1055, 1055, 1055,  999, 1055, 1055, 1055,
     1055, 1055, 1011, 1005, 1007, 1055, 1055, 1008, 1010, 1009,
     1016, 1006, 1055, 1055, 1055, 1055, 1017, 1055, 1055, 1012,

     1013, 1055, 1019, 1020, 1014, 1055, 1021, 1023, 1055, 1015,
     1018, 1055, 1022, 1055, 1024, 1055, 1025, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1036, 1028, 1026, 1032,
     1031, 1027, 1034, 1055, 1039, 1033, 1055, 1029, 1055, 1030,
     1035, 1055, 1037, 1055, 1055, 1038, 1040, 1055, 1055, 1055,
     1043, 1055, 1055, 1041, 1055, 1055, 1055, 1055, 1055, 1055,
     1049, 1042, 1055, 1055, 1055, 1048, 1053, 1044, 1055, 1055,
     1046, 1047, 1055, 1045, 1055, 1050, 1055, 1051, 1052, 1054,
       47,   47,   47, 1055,   47,   47,   45, 1055,   45, 1055,
       45, 1055, 1055,   45,   54, 1055,   54,   54,   54,   54,

       42,   42,   42,   42,   42,   42,   42,   42,   42,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  106, 1055,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  109,
     1055,  109, 1055,  109, 1055, 1055,  109,  111, 1055, 1055,
      111,  107, 1055, 1055, 1055,  107,  872, 1055,  107,  170,
     1055,  170, 1055,  170, 1055, 1055,  170,  111, 1055,  111,
     1055,  111, 1055, 1055,  111,  234, 1055,  741,  234,  236,
     1055, 1055, 1055,  236, 1055, 1055,  236,  359, 1055, 1055,
      359, 1055, 1055, 1055, 1055, 1055,  590, 1055, 1055, 1055,
     1055, 1055, 1055, 1055,  418, 1055, 1055, 1055, 1055, 1055,

     1055, 1055, 1055, 1055, 1055, 1055,  112, 1055,   45,   43,
       55,   53,   52, 1055,    3, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055
    ) ;

yy_chk : constant array(0..2367) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7, 1054,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,   10,   10,   10,   10,   10,   10,   12,   19,   64,
       12,   12,   12,   12,   12,   12,   14,   15,   21,   64,
       22,   20,   14,   15,   23,   15,   20,   21,   19,   22,
       20,   24,   23,   27,   19,   28,   25,   21,   29,   14,
       15,   30,   22,   32,   24,   25,   30,   29,   28,   34,
       23,   27,   25,   31,   30,   38,   40,   29,   31,   35,
       30,   33,   39,   32,   35,   51,   33,   39,   35,   58,
     1052,   51,   31,   37,   34,   40,   58,   62,   31,   38,
       33,   41,   62,   33,   36,   37,   37,   53,   51,   53,
       41,   36,   37,   36,   57,   37,   36,   36,   60,   63,

       36,   62,   37,   56,   36,   57,   36, 1051,  169,   36,
      169,   60,   63,   36,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   56,   44,   49,   49,   49,   49,   49,
       49,   44,   44,   44,   50,   50,   50,   50,   50,   50,
       59,   61,   65,   66,   69,   70,   67,   68,   71,   72,
       73,   65,   74,   75, 1050,   76,   72,   69,   77,   61,
       78,   75,   44,   59,   67,   80,   68,   81,   69,   70,
       79,   66,   76,   82,   71,   74,   77,   78,   73,   79,
       77,   83,   82,   81,   84,   86,   82,   87,   88,   80,
       83,   85,   82,   88,   90,   89,   85,   86,   91,   90,

       92,   85,   93,   94,   95,   96,   97,   99,   84,   87,
       98,   85,   89,   95,   85,   98,  100,   91,  101,  102,
       92,   94,   96,  103,  113,   93,  117,   99,  114,  100,
       97,  120,  114,  107,  101,  265,  120,  109,  111,  116,
      113,  102,  117,  109,  111,  265,  103,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  107,  105,  118,  108,
      109,  111,  127,  116,  105,  105,  105,  108,  108,  108,
      108,  108,  108,  110,  110,  110,  110,  110,  110,  115,
      119,  121,  118,  122,  123,  126,  127,  122,  119,  124,
      125,  126,  128,  129,  115,  105,  130,  133,  124,  125,

      132,  128,  123,  131,  132,  130,  134,  121,  131,  135,
      136,  137,  138,  139,  136,  134,  138,  129,  135,  140,
      133,  141,  143,  144,  142,  145,  146,  148,  137,  142,
      144,  140,  147,  142,  150,  139,  148,  141,  149,  146,
      147,  143,  151,  152,  153,  154,  155,  158,  147,  156,
      145,  151,  157,  155,  149,  159,  157,  160,  165,  150,
      162,  160,  159,  161,  164,  162,  153,  158,  163,  152,
      154,  156,  161,  164,  165,  163,  161,  166,  167,  170,
      177,  194,  170, 1049,  177,  194,  163,  172,  172,  172,
      172,  172,  172,  173,  173,  173,  173,  173,  173,  174,

      175,  167,  166,  176,  178,  180,  175,  181,  183,  179,
      182,  175,  174,  184,  176,  185,  175,  178,  179,  182,
      181,  180,  186,  185,  187,  188,  189,  190,  183,  187,
      191,  192,  193,  195,  197,  198,  190,  184,  188,  199,
      198,  201,  202,  203,  186,  204,  191,  192,  189,  195,
      193,  200,  193,  205,  197,  202,  200,  208,  199,  201,
      206,  207,  204,  209,  210,  211,  203,  213,  210,  206,
      207,  212, 1046,  214,  217,  205,  208,  215,  218,  216,
      212,  214,  220,  213,  219,  221,  215,  211,  216,  219,
      217,  222,  209,  218,  221,  223,  224,  226,  225,  227,

      224,  228,  220,  222,  230,  231,  232,  239,  227,  235,
      235,  240,  238,  226,  231,  223,  225,  230,  224,  238,
      236,  245, 1045,  239,  228,  242,  241,  240,  244,  234,
      232,  233,  233,  233,  233,  233,  233,  234,  234,  234,
      234,  234,  234,  236,  237,  241,  244,  242,  243,  245,
      246,  247,  237,  237,  237,  237,  237,  237,  248,  243,
      249,  250,  251,  246,  243,  250,  251,  247,  252,  253,
      254,  255,  256,  252,  258,  254,  259,  260,  258,  249,
      248,  261,  263,  262,  264,  253,  260,  262,  266,  268,
      267,  269,  271,  255,  256,  267,  270,  272,  273,  260,

      264,  259,  273,  261,  263,  271,  275,  268,  276,  277,
      275,  278,  266,  279,  269,  280,  270,  281,  277,  282,
      272,  283,  285,  286,  287,  288,  283,  282,  286,  278,
      285,  289,  276,  290,  292,  296,  295,  279,  301,  281,
      280,  295,  287,  301,  298,  292,  306,  288,  298,  300,
      304,  300,  308,  289,  302,  303,  305,  304,  307,  290,
      309,  310,  306,  308,  313,  296,  299,  299,  299,  299,
      299,  299,  311,  302,  303,  305,  314,  307,  315,  310,
      313,  311,  316,  317,  309,  318,  319,  317,  321,  320,
      322,  323,  325,  324,  314,  326,  328,  325,  315,  327,

      328,  318,  324,  326,  330,  321,  316,  322,  327,  323,
      329,  319,  320,  326,  329,  331,  332,  330,  333,  334,
      335,  338,  336,  337,  339,  341,  342,  332,  346,  340,
      349,  333,  331,  348,  343,  344,  345,  339,  341,  344,
      345,  347,  338,  334,  335,  336,  337,  340,  350,  342,
      343,  351,  346,  349,  347,  348,  352,  356,  353,  354,
      355,  352,  353,  356,  351,  355,  354,  350,  356,  360,
      365,  364,  359,  356,  358,  358,  358,  358,  358,  358,
      359,  359,  359,  359,  359,  359,  362,  361, 1042,  365,
      363,  366,  362,  360,  361,  363,  364,  368,  366,  369,

      371,  368,  370,  373,  372,  374,  375,  376,  369,  372,
      370,  376,  377,  371,  379,  383,  381,  382,  374,  389,
      387,  386,  388,  375,  381,  373,  382,  379,  384,  385,
      386,  392,  377,  384,  385,  390,  393,  391,  389,  383,
      387,  391,  392,  388,  390,  388,  394,  395,  396,  393,
      398,  397,  399,  402,  400,  403,  405,  404,  406,  399,
      395,  396,  409,  407,  412,  406,  402,  398,  407,  405,
      408,  410,  411,  413,  414,  394,  397,  400,  403,  404,
      409,  420,  419,  408,  415,  416,  412,  417,  411,  422,
      410,  418,  418,  418,  418,  419,  420,  413,  414,  421,

      415,  416,  423,  424,  421,  422,  417,  425,  426,  424,
      428,  429,  425,  430,  428,  431,  432,  434,  429,  433,
      423,  435,  438,  436,  434,  437,  440,  439,  431,  444,
      430,  426,  433,  443,  441,  432,  442,  445,  437,  438,
      439,  446,  449,  448,  453,  435,  436,  450,  448,  448,
      440,  441,  451,  442,  444,  443,  451,  452,  454,  446,
      449,  458,  445,  448,  455,  459,  450,  454,  456,  457,
      448,  460,  459,  455,  453,  452,  461,  456,  462,  458,
      460,  457,  462,  463,  464,  465,  466,  467,  468,  469,
      471,  470,  472, 1038,  459,  461, 1034,  468,  465,  473,

      463,  475,  469,  464,  470,  477,  473,  482,  466,  471,
      476,  472,  467,  474,  474,  474,  474,  474,  474,  479,
      475,  477,  478,  476,  480,  481,  478,  479,  483,  480,
      484,  485,  486,  488,  482,  490,  487,  489,  491,  490,
      485,  481,  489,  493,  492,  494,  495,  497,  496,  499,
      500,  486,  498,  483,  487,  495,  488,  496,  499,  484,
      502,  491,  492,  493,  494,  498,  503,  497,  504,  505,
      506,  507,  509,  500,  508,  503,  510,  504,  511,  506,
      512,  508,  513,  509,  512,  510,  502,  504,  505,  507,
      513,  514,  517,  515,  516,  518,  519,  520,  521,  522,

      523,  526,  524,  511,  515,  530,  516,  521,  514,  527,
      517,  530,  525,  528,  519,  524,  529,  522,  518,  533,
      520,  525,  531,  529,  526,  534,  536,  531,  527,  535,
      523,  537,  528,  535,  538,  537,  539,  533,  540,  541,
      539,  545,  544,  534,  546,  545,  547,  548,  536,  549,
      538,  540,  551,  549,  550,  552,  555,  548,  556,  557,
      559,  558,  560,  541,  544,  550,  547,  546,  561,  563,
      562,  559,  570, 1027,  564,  565,  551,  556,  552,  565,
      555,  558,  564,  566,  557,  560,  562,  569,  572,  567,
      561,  563,  566,  567,  571,  570,  569,  572,  571,  573,

      574,  575,  576,  573,  578,  579,  577,  580,  575,  574,
      577,  580,  581,  578,  582,  584,  585,  581,  586,  588,
      587,  576,  592,  589,  588,  590,  590,  590,  593,  579,
      597,  595,  594,  592,  585,  587,  586,  598,  582,  589,
      584,  594,  596,  599,  600,  601,  596,  604,  605,  607,
      593,  595,  597,  601,  602,  603,  599,  600,  602,  606,
      603,  598,  607,  606,  609,  601,  610,  604,  614,  601,
      605,  611,  612,  615,  613,  617,  616,  609,  613,  619,
      611,  612,  621,  620,  623,  624,  615,  622,  610,  616,
      625,  622,  614,  626,  624,  619,  620,  623,  617,  627,

      628,  629,  631,  630,  621,  632,  633,  627,  625,  634,
      635,  644,  628,  626,  632,  636,  626,  641,  640,  639,
      644,  641, 1026,  645,  631,  643,  629,  630,  646,  643,
      633,  636,  639,  634,  640,  647,  650,  651,  648,  635,
      642,  642,  642,  642,  642,  642,  645,  648,  649,  652,
      646,  653,  650,  654,  652,  649,  655,  647,  656,  657,
      659,  651,  658,  657,  660,  656,  662,  658,  661,  663,
      664,  665,  654,  653,  661,  667,  666,  663,  655,  662,
      666,  669,  659,  660,  668,  671,  670,  672,  664,  673,
      665,  668,  674,  675,  667,  670,  672,  676,  677,  678,

      679,  671,  680,  677,  679,  669,  680,  681,  678,  682,
      683,  684,  673,  685,  686,  688,  674,  689,  691,  675,
      690,  676,  682,  693,  690,  694,  685,  686,  696,  681,
      695,  698,  699,  684,  697,  689,  683,  701,  700,  688,
      691,  696,  703,  697,  699,  702,  704,  693,  694,  706,
      695,  700,  705,  707,  698,  708,  710,  705,  709,  711,
      712,  703,  706,  714,  713,  704,  701,  709,  713,  702,
      715,  716,  717,  707,  710,  711,  718,  719,  720,  708,
      717,  719,  721,  722,  712,  723,  714,  724,  725,  726,
      716,  727,  728,  726,  731,  721,  715,  725,  723,  729,

      730,  731,  733,  734,  720,  718,  722,  732,  735,  736,
      738,  733,  724,  727,  728,  739,  743,  746,  740,  729,
      730,  738,  742,  744,  732,  735,  734,  740,  736,  741,
      741,  741,  741,  741,  745,  742,  743,  739,  747,  749,
      746,  750,  744,  751,  752,  750,  753,  754,  755,  756,
      757,  761,  751,  745,  752,  758,  759,  760,  747,  762,
      759,  763,  753,  757,  762,  765,  760,  764,  756,  749,
      768,  754,  755,  769,  763,  758,  764,  770,  771,  772,
      761,  773,  769,  774,  775,  776,  773,  777,  778,  768,
      776,  765,  782,  778,  779,  770,  780,  771,  781,  779,

      785,  774,  786,  784,  775,  780,  786,  787,  788,  772,
      790,  781,  784,  777,  782,  791,  787,  792,  785,  789,
      789,  789,  789,  789,  789,  793,  794,  790,  796,  795,
      797,  788,  799,  796,  791,  792,  801,  802,  803,  804,
      805,  806,  810,  816,  813,  799,  794,  793,  795,  801,
      797,  807,  809,  811,  803,  807,  805,  814,  804,  809,
      812,  810,  817,  815,  818,  806,  802,  819,  816,  812,
      813,  817,  820,  814,  815,  811,  821,  822,  823,  824,
      826,  820,  830,  827,  831,  829,  822,  827,  818,  829,
      832,  819,  836,  821,  834,  835,  837,  838,  826,  839,

      823,  824,  840,  834,  841,  842,  830,  831,  843,  837,
      832,  845,  846,  835,  850,  836,  838,  839,  848,  847,
      849,  842,  851,  841,  845,  852,  840,  843,  847,  853,
      849,  848,  854,  857,  859,  846,  861,  852,  850,  862,
      851,  854,  863,  866,  864,  865,  867,  859,  862,  864,
      865,  853,  868,  870,  866,  857,  869,  871,  861,  872,
      872,  872,  872,  872,  863,  874,  867,  876,  875,  869,
      878,  877,  868,  870,  879,  881,  871,  875,  880,  882,
      885,  887,  886,  883,  881,  889,  890,  879,  874,  877,
      883,  876,  888,  878,  880,  890,  892,  891,  885,  886,

      893,  887,  882,  894,  895,  888,  896,  893,  889,  891,
      898,  899,  900,  901,  902,  904,  900,  895,  892,  902,
      903,  905,  894,  909,  907,  908,  910,  898,  899,  908,
      896,  912,  901,  907,  904,  913,  916,  903,  911,  905,
      906,  906,  906,  906,  906,  906,  917,  911,  913,  910,
      912,  918,  909,  919,  920,  923,  922,  919,  924,  917,
      918,  922,  925,  926,  923,  916,  927,  928,  929,  930,
      924,  925,  931,  932,  933,  934,  928,  929,  930,  935,
      920,  926,  936,  938,  934,  927,  939,  938,  942,  932,
      941,  943,  942,  944,  931,  946,  933,  935,  949,  941,

      944,  948,  951,  949,  950,  936,  952,  951,  955,  943,
      939,  956,  950,  957,  958,  952,  955,  959,  946,  960,
      961,  948,  963,  965,  968,  961,  959,  964,  966,  970,
      967,  971,  960,  956,  967,  972,  964,  957,  958,  973,
      983,  966,  975,  971,  976,  963,  978,  965,  968,  976,
      975,  979,  980,  981,  972,  982,  984,  983,  970,  986,
      979,  980,  982,  973,  985,  984,  987,  988,  985,  978,
      991,  989,  986,  992,  995,  993,  981,  997,  998,  999,
     1000, 1001,  995,  987,  989, 1004, 1003,  991,  993,  992,
     1001,  988, 1002, 1006, 1005, 1007, 1002, 1010, 1008,  997,

      998, 1009, 1004, 1005,  999, 1012, 1006, 1008, 1013, 1000,
     1003, 1014, 1007, 1016, 1009, 1017, 1010, 1018, 1021, 1024,
     1019, 1028, 1023, 1022, 1025, 1029, 1024, 1014, 1012, 1019,
     1018, 1013, 1022, 1030, 1029, 1021, 1031, 1016, 1032, 1017,
     1023, 1033, 1025, 1035, 1036, 1028, 1030, 1037, 1040, 1039,
     1033, 1041, 1043, 1031, 1044, 1047, 1053, 1048, 1020, 1015,
     1041, 1032, 1011,  996,  994, 1040, 1048, 1035,  990,  977,
     1037, 1039,  974, 1036,  969, 1043,  962, 1044, 1047, 1053,
     1056, 1056, 1056,  954, 1056, 1056, 1057,  953, 1057,  947,
     1057,  945,  940, 1057, 1058,  921, 1058, 1058, 1058, 1058,

     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061,  915,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1062,
      914, 1062,  897, 1062,  884,  873, 1062, 1063,  860,  858,
     1063, 1064,  856,  855,  844, 1064,  833,  828, 1064, 1065,
      825, 1065,  808, 1065,  800,  798, 1065, 1066,  783, 1066,
      767, 1066,  766,  748, 1066, 1067,  737,  692, 1067, 1068,
      687,  638,  637, 1068,  618,  608, 1068, 1069,  591,  583,
     1069,  568,  554,  553,  543,  542,  532,  501,  447,  427,
      401,  380,  378,  367,  357,  312,  297,  294,  293,  291,

      284,  274,  257,  229,  196,  168,   55,   54,   45,   42,
       26,   18,   17,    3, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055
    ) ;


-- copy whatever the last rule matched to the standard output

procedure ECHO is
begin
   if Ada.Text_IO.Is_Open(user_output_file) then
            Ada.Text_IO.Put( user_output_file, YYText);
   else
            Ada.Text_IO.Put( YYText );
   end if;
end ECHO;

-- enter a start condition.
-- Using procedure requires a () after the ENTER, but makes everything
-- much neater.

--  procedure ENTER( state : integer ) is
--  begin
--           yy_start := 1 + 2 * state;
--  end ENTER;

-- action number for EOF rule of a given start state
function YY_STATE_EOF(state : integer) return integer is
begin
         return YY_END_OF_BUFFER + state + 1;
end YY_STATE_EOF;

-- return all but the first 'n' matched characters back to the input stream
--  procedure yyless(n : integer) is
--  begin
--           yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
--           yy_cp := yy_bp + n;
--           yy_c_buf_p := yy_cp;
--           YY_DO_BEFORE_ACTION; -- set up yytext again
--  end yyless;

-- redefine this if you have something you want each time.
procedure YY_USER_ACTION is
begin
         null;
end YY_USER_ACTION;

-- yy_get_previous_state - get the state just before the EOB char was reached

function yy_get_previous_state return yy_state_type is
         yy_current_state : yy_state_type;
         yy_c : short;
begin
         yy_current_state := yy_start;

         for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
   yy_c := yy_ec(yy_ch_buf(yy_cp));
   if  yy_accept(yy_current_state) /= 0  then
               yy_last_accepting_state := yy_current_state;
               yy_last_accepting_cpos := yy_cp;
   end if;
   while  yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state  loop
               yy_current_state := yy_def(yy_current_state);
               if  yy_current_state >= 1056  then
      yy_c := yy_meta(yy_c);
               end if;
   end loop;
   yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
         end loop;

         return yy_current_state;
end yy_get_previous_state;

--  procedure yyrestart( input_file : File_Type ) is
--  begin
--     Open_Input(Ada.Text_IO.Name(input_file));
--  end yyrestart;

begin -- of YYLex
<<new_file>>
        -- this is where we enter upon encountering an end-of-file and
        -- yywrap() indicating that we should continue processing

      if  yy_init  then
         if  yy_start = 0  then
            yy_start := 1;      -- first start state
         end if;

        -- we put in the '\n' and start reading from [1] so that an
        -- initial match-at-newline will be true.

         yy_ch_buf(0) := ASCII.LF;
         yy_n_chars := 1;

        -- we always need two end-of-buffer characters.  The first causes
        -- a transition to the end-of-buffer state.  The second causes
        -- a jam in that state.

         yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
         yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

         yy_eof_has_been_seen := false;

         yytext_ptr := 1;
         yy_c_buf_p := yytext_ptr;
         yy_hold_char := yy_ch_buf(yy_c_buf_p);
         yy_init := false;
-- UMASS CODES :
--   Initialization
         Tok_Begin_Line := 1;
         Tok_End_Line := 1;
         Tok_Begin_Col := 0;
         Tok_End_Col := 0;
         Token_At_End_Of_Line := false;
         Line_Number_Of_Saved_Tok_Line1 := 0;
         Line_Number_Of_Saved_Tok_Line2 := 0;
-- END OF UMASS CODES.
      end if; -- yy_init

      loop                -- loops until end-of-file is reached

-- UMASS CODES :
--    if last matched token is end_of_line, we must
--    update the token_end_line and reset tok_end_col.
         if Token_At_End_Of_Line then
      Tok_End_Line := Tok_End_Line + 1;
      Tok_End_Col := 0;
      Token_At_End_Of_Line := False;
         end if;
-- END OF UMASS CODES.

         yy_cp := yy_c_buf_p;

         -- support of yytext
         yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
   yy_bp := yy_cp;
   yy_current_state := yy_start;
   loop
      yy_c := yy_ec(yy_ch_buf(yy_cp));
      if  yy_accept(yy_current_state) /= 0  then
               yy_last_accepting_state := yy_current_state;
               yy_last_accepting_cpos := yy_cp;
      end if;
      while  yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state  loop
               yy_current_state := yy_def(yy_current_state);
               if  yy_current_state >= 1056  then
         yy_c := yy_meta(yy_c);
               end if;
      end loop;
      yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
            yy_cp := yy_cp + 1;
if  yy_current_state = 1055  then
               exit;
end if;
   end loop;
   yy_cp := yy_last_accepting_cpos;
   yy_current_state := yy_last_accepting_state;

<<next_action>>
         yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

         if aflex_debug then  -- output acceptance info. for (-d) debug mode
            Ada.Text_IO.Put( Standard_Error, "--accepting rule #" );
            Ada.Text_IO.Put( Standard_Error, INTEGER'IMAGE(yy_act) );
            Ada.Text_IO.Put_Line( Standard_Error, "(""" & YYText & """)");
         end if;

-- UMASS CODES :
--   Update tok_begin_line, tok_end_line, tok_begin_col and tok_end_col
--   after matching the token.
         if yy_act /= YY_END_OF_BUFFER and then yy_act /= 0 then
-- Token are matched only when yy_act is not yy_end_of_buffer or 0.
            Tok_Begin_Line := Tok_End_Line;
            Tok_Begin_Col := Tok_End_Col + 1;
            Tok_End_Col := Tok_Begin_Col + yy_cp - yy_bp - 1;
            if yy_ch_buf ( yy_bp ) = ASCII.LF then
            Token_At_End_Of_Line := True;
            end if;
         end if;
-- END OF UMASS CODES.

<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
      when 0 => -- must backtrack
      -- undo the effects of YY_DO_BEFORE_ACTION
      yy_ch_buf(yy_cp) := yy_hold_char;
      yy_cp := yy_last_accepting_cpos;
      yy_current_state := yy_last_accepting_state;
      goto next_action;



when 1 => 
--# line 115 "mast_results_lex.l"
return Left_Paren;

when 2 => 
--# line 116 "mast_results_lex.l"
return Right_Paren;

when 3 => 
--# line 117 "mast_results_lex.l"
return Arrow;

when 4 => 
--# line 118 "mast_results_lex.l"
return Comma;

when 5 => 
--# line 119 "mast_results_lex.l"
return Semicolon;

when 6 => 
--# line 121 "mast_results_lex.l"
YYVal.flag:=True; return Yes_No;

when 7 => 
--# line 122 "mast_results_lex.l"
YYVal.flag:=False; return Yes_No;

when 8 => 
--# line 125 "mast_results_lex.l"
return Real_Time_Situation;

when 9 => 
--# line 126 "mast_results_lex.l"
return Model_Name;

when 10 => 
--# line 127 "mast_results_lex.l"
return Model_Date;

when 11 => 
--# line 128 "mast_results_lex.l"
return Model_Name;

when 12 => 
--# line 129 "mast_results_lex.l"
return Model_Date;

when 13 => 
--# line 130 "mast_results_lex.l"
return Generation_Tool;

when 14 => 
--# line 131 "mast_results_lex.l"
return Generation_Profile;

when 15 => 
--# line 132 "mast_results_lex.l"
return Generation_Date;

when 16 => 
--# line 133 "mast_results_lex.l"
return Results;

when 17 => 
--# line 134 "mast_results_lex.l"
return The_Type;

when 18 => 
--# line 135 "mast_results_lex.l"
return Slack;

when 19 => 
--# line 136 "mast_results_lex.l"
return Value;

when 20 => 
--# line 137 "mast_results_lex.l"
return Trace;

when 21 => 
--# line 138 "mast_results_lex.l"
return Pathname;

when 22 => 
--# line 140 "mast_results_lex.l"
return Transaction;

when 23 => 
--# line 141 "mast_results_lex.l"
return Name;

when 24 => 
--# line 142 "mast_results_lex.l"
return Timing_Result;

when 25 => 
--# line 143 "mast_results_lex.l"
return Event_Name;

when 26 => 
--# line 144 "mast_results_lex.l"
return Worst_Local_Response_Time;

when 27 => 
--# line 145 "mast_results_lex.l"
return Best_Local_Response_Time;

when 28 => 
--# line 146 "mast_results_lex.l"
return Worst_Blocking_Time;

when 29 => 
--# line 147 "mast_results_lex.l"
return Num_Of_Suspensions;

when 30 => 
--# line 148 "mast_results_lex.l"
return Worst_Global_Response_Times;

when 31 => 
--# line 149 "mast_results_lex.l"
return Best_Global_Response_Times;

when 32 => 
--# line 150 "mast_results_lex.l"
return Jitters;

when 33 => 
--# line 152 "mast_results_lex.l"
return Simulation_Timing_Result;

when 34 => 
--# line 153 "mast_results_lex.l"
return Avg_Local_Response_Time;

when 35 => 
--# line 154 "mast_results_lex.l"
return Avg_Blocking_Time;

when 36 => 
--# line 155 "mast_results_lex.l"
return Max_Preemption_Time;

when 37 => 
--# line 156 "mast_results_lex.l"
return Suspension_Time;

when 38 => 
--# line 157 "mast_results_lex.l"
return Num_Of_Queued_Activations;

when 39 => 
--# line 158 "mast_results_lex.l"
return Avg_Global_Response_Times;

when 40 => 
--# line 159 "mast_results_lex.l"
return Local_Miss_Ratios;

when 41 => 
--# line 160 "mast_results_lex.l"
return Global_Miss_Ratios;

when 42 => 
--# line 161 "mast_results_lex.l"
return Referenced_Event;

when 43 => 
--# line 162 "mast_results_lex.l"
return Time_Value;

when 44 => 
--# line 163 "mast_results_lex.l"
return Deadline;

when 45 => 
--# line 164 "mast_results_lex.l"
return Ratio;

when 46 => 
--# line 165 "mast_results_lex.l"
return Miss_Ratios;

when 47 => 
--# line 167 "mast_results_lex.l"
return Processing_Resource;

when 48 => 
--# line 168 "mast_results_lex.l"
return Detailed_Utilization;

when 49 => 
--# line 169 "mast_results_lex.l"
return Total;

when 50 => 
--# line 170 "mast_results_lex.l"
return Application;

when 51 => 
--# line 171 "mast_results_lex.l"
return Context_Switch;

when 52 => 
--# line 172 "mast_results_lex.l"
return Timer;

when 53 => 
--# line 173 "mast_results_lex.l"
return Driver;

when 54 => 
--# line 174 "mast_results_lex.l"
return Ready_Queue_Size;

when 55 => 
--# line 175 "mast_results_lex.l"
return Max_Num;

when 56 => 
--# line 177 "mast_results_lex.l"
return Operation;

when 57 => 
--# line 179 "mast_results_lex.l"
return Scheduling_Server;

when 58 => 
--# line 180 "mast_results_lex.l"
return Scheduling_Parameters;

when 59 => 
--# line 181 "mast_results_lex.l"
return Server_Sched_Parameters;

when 60 => 
--# line 182 "mast_results_lex.l"
return Synchronization_Parameters;

when 61 => 
--# line 183 "mast_results_lex.l"
return Server_Synch_Parameters;

when 62 => 
--# line 185 "mast_results_lex.l"
return Shared_Resource;

when 63 => 
--# line 186 "mast_results_lex.l"
return Priority_Ceiling;

when 64 => 
--# line 187 "mast_results_lex.l"
return Ceiling;

when 65 => 
--# line 188 "mast_results_lex.l"
return Level;

when 66 => 
--# line 189 "mast_results_lex.l"
return Queue_Size;

when 67 => 
--# line 190 "mast_results_lex.l"
return Utilization;

when 68 => 
--# line 192 "mast_results_lex.l"
return Fixed_Priority_Policy;

when 69 => 
--# line 193 "mast_results_lex.l"
return Non_Preemptible_Fp_Policy;

when 70 => 
--# line 194 "mast_results_lex.l"
return Interrupt_Fp_Policy;

when 71 => 
--# line 195 "mast_results_lex.l"
return The_Priority;

when 72 => 
--# line 196 "mast_results_lex.l"
return Polling_Policy;

when 73 => 
--# line 197 "mast_results_lex.l"
return Polling_Period;

when 74 => 
--# line 198 "mast_results_lex.l"
return Polling_Worst_Overhead;

when 75 => 
--# line 199 "mast_results_lex.l"
return Polling_Best_Overhead;

when 76 => 
--# line 200 "mast_results_lex.l"
return Polling_Avg_Overhead;

when 77 => 
--# line 201 "mast_results_lex.l"
return Sporadic_Server_Policy;

when 78 => 
--# line 202 "mast_results_lex.l"
return Normal_Priority;

when 79 => 
--# line 203 "mast_results_lex.l"
return Background_Priority;

when 80 => 
--# line 204 "mast_results_lex.l"
return Initial_Capacity;

when 81 => 
--# line 205 "mast_results_lex.l"
return Replenishment_Period;

when 82 => 
--# line 206 "mast_results_lex.l"
return Max_Pending_Replenishments;

when 83 => 
--# line 207 "mast_results_lex.l"
return Preassigned;

when 84 => 
--# line 209 "mast_results_lex.l"
return Edf_Policy;

when 85 => 
--# line 210 "mast_results_lex.l"
return Srp_Parameters;

when 86 => 
--# line 211 "mast_results_lex.l"
return The_Preemption_Level;

when 87 => 
--# line 214 "mast_results_lex.l"
YYVal.name_index:=
                         Symbol_Table.Add_Or_Find(To_Var_String(YYText));
            return Identifier;

when 88 => 
--# line 217 "mast_results_lex.l"
YYVal.date:="                   ";
            YYVal.date(1..YYText'length):=YYText;
            return Date;

when 89 => 
--# line 220 "mast_results_lex.l"
YYVal.name_index:=
                         Symbol_Table.Add_Or_Find
                             (To_Var_String(YYText(2..YYText'length-1)));
            return Identifier;

when 90 => 
--# line 224 "mast_results_lex.l"
YYVal.num:=Integer'Value(YYText);
            YYVal.float_num:=Real_Number(YYVal.num);
            YYVal.Is_Float:=False;
            return Number;

when 91 => 
--# line 228 "mast_results_lex.l"
YYVal.float_num:=Real_Number'Value(YYText);
            YYVal.Is_Float:=True;
            return Number;

when 92 => 
--# line 232 "mast_results_lex.l"
YYVal.float_num:=Real_Number'Value
                         (YYText(1..YYText'length-1));
            YYVal.Is_Float:=True;
            return Number;

when 93 => 
--# line 237 "mast_results_lex.l"
YYVal.float_num:=Large_Number;
            YYVal.Is_Float:=True;
            return Number;

when 94 => 
--# line 241 "mast_results_lex.l"
YYVal.text:=To_Var_String(YYText(2..YYText'length-1));
            return Quoted_Text;

when 95 => 
--# line 244 "mast_results_lex.l"
YYVal.text:=To_Var_String(YYText);
            return Path;

when 96 => 
--# line 247 "mast_results_lex.l"
null;         

when 97 => 
--# line 248 "mast_results_lex.l"
null;         

when 98 => 
--# line 249 "mast_results_lex.l"
null;         

when 99 => 
--# line 250 "mast_results_lex.l"
return Error;

when 100 => 
--# line 252 "mast_results_lex.l"
ECHO;
when YY_END_OF_BUFFER + INITIAL + 1 => 
            return End_Of_Input;
            when YY_END_OF_BUFFER =>
               -- undo the effects of YY_DO_BEFORE_ACTION
               yy_ch_buf(yy_cp) := yy_hold_char;

               yytext_ptr := yy_bp;

               case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                     begin
                        if  yywrap  then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                           yy_c_buf_p := yytext_ptr;

                           yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                           goto do_action;
                        else
                           --  start processing a new file
                           yy_init := true;
                           goto new_file;
                        end if;
                     end;
                        when EOB_ACT_RESTART_SCAN =>
                     yy_c_buf_p := yytext_ptr;
                     yy_hold_char := yy_ch_buf(yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                     yy_c_buf_p := yy_n_chars;
                     yy_current_state := yy_get_previous_state;

                     yy_cp := yy_c_buf_p;
                     yy_bp := yytext_ptr;
                     goto next_action;
                        end case; -- case yy_get_next_buffer()
            when others =>
               Ada.Text_IO.Put( "action # " );
               Ada.Text_IO.Put( INTEGER'IMAGE(yy_act) );
               Ada.Text_IO.New_Line;
               raise AFLEX_INTERNAL_ERROR;
            end case; -- case (yy_act)
      end loop; -- end of loop waiting for end of file
end YYlex;
--# line 252 "mast_results_lex.l"

end MAST_Results_Lex;

